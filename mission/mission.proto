syntax = "proto3";

package dronecore.rpc.mission;

option java_package = "io.dronecore.mission";
option java_outer_classname = "MissionProto";

service MissionService {
    rpc UploadMission(UploadMissionRequest) returns(UploadMissionResponse) {}
    rpc DownloadMission(DownloadMissionRequest) returns(DownloadMissionResponse) {}
    rpc StartMission(StartMissionRequest) returns(StartMissionResponse) {}
    rpc PauseMission(PauseMissionRequest) returns(PauseMissionResponse) {}
    rpc SetCurrentMissionItemIndex(SetCurrentMissionItemIndexRequest) returns(SetCurrentMissionItemIndexResponse) {}
    rpc GetCurrentMissionItemIndex(GetCurrentMissionItemIndexRequest) returns(GetCurrentMissionItemIndexResponse) {}
    rpc GetMissionCount(GetMissionCountRequest) returns(GetMissionCountResponse) {}
    rpc IsMissionFinished(IsMissionFinishedRequest) returns(IsMissionFinishedResponse) {}
    rpc SubscribeMissionProgress(SubscribeMissionProgressRequest) returns(stream MissionProgressResponse) {}
}

message UploadMissionRequest {
    Mission mission = 1;
}
message UploadMissionResponse {
    MissionResult mission_result = 1;
}

message DownloadMissionRequest {}
message DownloadMissionResponse {
    Mission mission = 1;
}

message StartMissionRequest {}
message StartMissionResponse {
    MissionResult mission_result = 1;
}

message PauseMissionRequest {}
message PauseMissionResponse {
    MissionResult mission_result = 1;
}

message SetCurrentMissionItemIndexRequest {
    int32 index = 1;
}
message SetCurrentMissionItemIndexResponse {
    MissionResult mission_result = 1;
}

message GetCurrentMissionItemIndexRequest {}
message GetCurrentMissionItemIndexResponse {
    int32 index = 1;
}

message GetMissionCountRequest {}
message GetMissionCountResponse {
    int32 count = 1;
}

message IsMissionFinishedRequest {}
message IsMissionFinishedResponse {
    bool is_finished = 1;
}

message SubscribeMissionProgressRequest {}
message MissionProgressResponse {
    int32 current_item_index = 1;
    int32 mission_count = 2;
}

message Mission {
    repeated MissionItem mission_item = 1;
}

message MissionItem {
    double latitude_deg = 1;
    double longitude_deg = 2;
    double relative_altitude_m = 3;
    float speed_m_s = 4;
    bool is_fly_through = 5;
    float gimbal_pitch_deg = 6;
    float gimbal_yaw_deg = 7;
    CameraAction camera_action = 8;

    enum CameraAction {
        NONE = 0;
        TAKE_PHOTO = 1;
        START_PHOTO_INTERVAL = 2;
        STOP_PHOTO_INTERVAL = 3;
        START_VIDEO = 4;
        STOP_VIDEO = 5;
    }
}

message MissionResult {
    Result result = 1;
    string result_str = 2;

    enum Result {
        SUCCESS = 0;
        ERROR = 1;
        TOO_MANY_MISSION_ITEMS = 2;
        BUSY = 3;
        TIMEOUT = 4;
        INVALID_ARGUMENT = 5;
        UNSUPPORTED = 6;
        NO_MISSION_AVAILABLE = 7;
        UNKNOWN = 1000;
    }
}
