public lazy var {{ name }}: Observable<{{ return_type }}> = create{{ capitalized_name }}({% for param in params %}{{ param.name }}: {{ param.type }}{{ ", " if not loop.last }}{% endfor %})

private func create{{ name }}({% for param in params %}{{ param.name }}: {{ param.type }}{{ ", " if not loop.last }}{% endfor %}) -> Observable<{{ return_type }}> {
    return Observable.create { observer in
        let {{ request_name }} = {{ request_rpc_type }}()

        do {
            let call = try self.service.subscribe{{ name.lower() }}({{ request_name }}, completion: nil)
            while let response = try? call.receive() {

                {% if is_return_type_primitive -%}
                   let {{ return_name }} = response.{{ return_name }}
                {% else -%}
                    let {{ return_name }} = {{ return_type }}.translateFromRPC(response.{{ return_name }})
                {%- endif %}

                observer.onNext({{ return_name }})
            }
        } catch {
            observer.onError("Failed to subscribe to {{ name }} stream")
        }

        return Disposables.create()
    }.subscribeOn(self.scheduler)
}
